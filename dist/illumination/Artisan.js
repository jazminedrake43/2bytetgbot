"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Artisan = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
class Artisan {
    constructor(basePath) {
        this.basePath = basePath;
    }
    /**
     * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ–∫—Ü–∏—é
     * @param name –ò–º—è —Å–µ–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: Home, Auth, Settings)
     */
    async createSection(name) {
        const sectionName = this.formatSectionName(name);
        const sectionsDir = path_1.default.join(this.basePath, 'sections');
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é sections –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if (!fs_1.default.existsSync(sectionsDir)) {
            fs_1.default.mkdirSync(sectionsDir, { recursive: true });
        }
        const sectionPath = path_1.default.join(sectionsDir, `${sectionName}Section.ts`);
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è —Å–µ–∫—Ü–∏—è
        if (fs_1.default.existsSync(sectionPath)) {
            throw new Error(`Section ${sectionName} already exists at ${sectionPath}`);
        }
        const template = this.getSectionTemplate(sectionName);
        // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å–µ–∫—Ü–∏–∏
        fs_1.default.writeFileSync(sectionPath, template);
        console.log(`‚úÖ Created section ${sectionName} at ${sectionPath}`);
    }
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–º—è —Å–µ–∫—Ü–∏–∏ (–ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –∑–∞–≥–ª–∞–≤–Ω–∞—è, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ—á–Ω—ã–µ)
     */
    formatSectionName(name) {
        return name.charAt(0).toUpperCase() + name.slice(1).toLowerCase();
    }
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —à–∞–±–ª–æ–Ω –¥–ª—è –Ω–æ–≤–æ–π —Å–µ–∫—Ü–∏–∏
     */
    getSectionTemplate(name) {
        return `import { Section } from "../../src/illumination/Section";
import { SectionOptions } from "../../src/types";
import { InlineKeyboard } from "../../src/illumination/InlineKeyboard";

export default class ${name}Section extends Section {
  static command = "${name.toLowerCase()}";
  static description = "${name} section";
  static actionRoutes = {
    "${name.toLowerCase()}.index": "index",
  };
  
  public sectionId = "${name.toLowerCase()}";
  private mainInlineKeyboard: InlineKeyboard;

  constructor(options: SectionOptions) {
    super(options);

    this.mainInlineKeyboard = this.makeInlineKeyboard([
      [this.makeInlineButton("üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", "home.index")],
    ]);
  }

  public async up(): Promise<void> {}
  public async down(): Promise<void> {}
  public async setup(): Promise<void> {}
  public async unsetup(): Promise<void> {}

  async index() {
    const message = \`
      üëã Welcome to ${name} Section
    \`;

    await this.message(message)
      .inlineKeyboard(this.mainInlineKeyboard)
      .send();
  }
}
`;
    }
    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ–∫—Ü–∏—é
     */
    async addMethod(sectionName, methodName) {
        const formattedSectionName = this.formatSectionName(sectionName);
        const sectionPath = path_1.default.join(this.basePath, 'sections', `${formattedSectionName}Section.ts`);
        if (!fs_1.default.existsSync(sectionPath)) {
            throw new Error(`Section ${formattedSectionName} does not exist at ${sectionPath}`);
        }
        let content = fs_1.default.readFileSync(sectionPath, 'utf-8');
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π route –≤ actionRoutes
        const routeEntry = `"${sectionName.toLowerCase()}.${methodName}": "${methodName}",`;
        content = content.replace(/static actionRoutes = {([^}]*)}/, (match, routes) => `static actionRoutes = {${routes}    ${routeEntry}\n  }`);
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥
        const methodTemplate = `
  async ${methodName}() {
    const message = \`
      // –î–æ–±–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–¥–µ—Å—å
    \`;

    await this.message(message)
      .inlineKeyboard(this.mainInlineKeyboard)
      .send();
  }
`;
        // –í—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –ø–µ—Ä–µ–¥ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–æ–π
        content = content.replace(/}$/, `${methodTemplate}}`);
        fs_1.default.writeFileSync(sectionPath, content);
        console.log(`‚úÖ Added method ${methodName} to section ${formattedSectionName}`);
    }
    /**
     * –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ–∫—Ü–∏–π
     */
    async listSections() {
        const sectionsDir = path_1.default.join(this.basePath, 'sections');
        if (!fs_1.default.existsSync(sectionsDir)) {
            console.log('No sections found');
            return;
        }
        const sections = fs_1.default.readdirSync(sectionsDir)
            .filter(file => file.endsWith('Section.ts'))
            .map(file => file.replace('Section.ts', ''));
        console.log('\nüìÅ Available sections:');
        sections.forEach(section => {
            console.log(`  - ${section}`);
        });
    }
}
exports.Artisan = Artisan;
