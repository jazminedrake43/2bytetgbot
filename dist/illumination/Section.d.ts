import { type Database } from "bun:sqlite";
import mustache from "mustache";
import { Markup, Telegraf } from "telegraf";
import { App } from "../core/App";
import { MakeManualPaginateButtonsParams, RunnedSection, SectionOptions } from "../types";
import { InlineKeyboard } from "./InlineKeyboard";
import Message2byte from "./Message2Byte";
import { RunSectionRoute } from "./RunSectionRoute";
import { Telegraf2byteContext } from "./Telegraf2byteContext";
export declare class Section {
    static command: string;
    static description: string;
    static actionRoutes: {
        [key: string]: string;
    };
    sectionId: string;
    protected ctx: Telegraf2byteContext;
    protected bot: Telegraf<Telegraf2byteContext>;
    protected app: App;
    protected route: RunSectionRoute;
    protected markup: typeof Markup;
    protected btnHome: import("@telegraf/types").InlineKeyboardButton.CallbackButton & {
        hide: boolean;
    };
    protected iconBack: string;
    protected iconPlus: string;
    protected iconDelete: string;
    protected iconOk: string;
    protected iconInput: string;
    protected iconOutput: string;
    protected iconTime: string;
    protected iconCheck: string;
    protected iconSet: string;
    protected iconRefresh: string;
    protected iconHistory: string;
    protected iconEuro: string;
    protected iconRejected: string;
    protected labelBack: string;
    protected callbackParams: URLSearchParams | null;
    protected mustache: typeof mustache;
    protected mainMenuKeyboardArray: any[][];
    protected db: Database;
    constructor(options: SectionOptions);
    setup(): Promise<void>;
    unsetup(): Promise<void>;
    up(): Promise<void>;
    down(): Promise<void>;
    parseParamsCallbackdata(): URLSearchParams;
    makePaginateButtons(metadata: any, callbackDataAction: string, paramsQuery?: Record<string, any>): any[][];
    static makeManualPaginateButtons(params: MakeManualPaginateButtonsParams): any[][];
    isRepeatedQuery(objParamsNeedle: Record<string, any>): boolean;
    useWithPhoto(pathPhoto: string): void;
    setMainMenuKeyboard(data: any[][]): this;
    mainMenuKeyboard(): any;
    getSetting(name: string): Promise<any>;
    cancelUserWaitingReply(): boolean;
    backInlineButtion(data: string): any;
    inlineButton(text: string, data: string): any;
    setCallbackParams(params: URLSearchParams): this;
    existsAnswerInput(inputKey: string): boolean;
    getAnswerInput(inputKey: string): any;
    setAnswerInput(inputKey: string, value: any): void;
    makeQueryParams(...args: any[]): URLSearchParams;
    makeInlineKeyboard(buttons: any[][]): InlineKeyboard;
    makeInlineButton(text: string, data: string): any;
    message(message: string): Message2byte;
    newMessage(message: string): Message2byte;
    updateMessage(message: string): Message2byte;
    getCtx(): Telegraf2byteContext;
    getCurrentSection(): RunnedSection;
    getPreviousSection(): RunnedSection | undefined;
}
